#ifndef T3_H_
#define T3_H_

#include <stdio.h>
#include "options.h"

typedef struct {
	int channel;
	long long pulse_number;
	int time;
} t3_t;


typedef struct {
	int length;
	long long left_index;
	long long right_index;
	t3_t *queue;
} t3_queue_t;

int next_t3(FILE *in_stream, t3_t *record, options_t *options);
void print_t3(FILE *out_stream, t3_t *record, options_t *options);
int t3_comparator(const void *a, const void *b);

t3_queue_t *allocate_t3_queue(int queue_length);
void free_t3_queue(t3_queue_t **queue);
t3_t get_queue_item_t3(t3_queue_t *queue, int index);

/* The windowed stream represents a series of streams which are composed of
 * photons in some time window. For example, an intensity stream can be 
 * generated by counting all photons in 50ms bins, so we want to be able
 * to produce all photons in consecutive 50ms windows.
 */
typedef struct {
	window_t limits;
	long long width;
} t3_window_t;

typedef struct {
	t3_t current_photon;
	int yielded_photon;
	t3_window_t window;
	FILE *in_stream;
} t3_windowed_stream_t;

void init_t3_window(t3_window_t *window, options_t *options);
void next_t3_window(t3_window_t *window);
void init_t3_windowed_stream(t3_windowed_stream_t *stream,
		FILE *in_stream, options_t *options);
int next_t3_windowed(t3_windowed_stream_t *stream, t3_t *record,
		options_t *options);

#endif
