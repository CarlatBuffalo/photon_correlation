import sys
import time
import os

env  = Environment()
ccflags = ["-Wall",
           "-std=c99",
           "--pedantic",
           "-D_FILE_OFFSET_BITS=64", # 64-bit file compatibility
           "-DVERSION_MAJOR=1",
           "-DVERSION_MINOR=6",
           "-O3",
##           "-fopenmp",
           "-lm",
           "-DVERSION_STRING=\'{0}\'".format(
               time.strftime("%Y.%m.%d %H.%M.%S"))]

##if "linux" in sys.platform:
##    ccflags.append("-fPIC")
           
env["CCFLAGS"] = ccflags
env["LINKFLAGS"] = ccflags


# Set up the main programs
common = ["types.c", "error.c", "strings.c", "files.c", "options.c", "modes.c",
          "limits.c", "strtoll.c", "t2.c", "t3.c"]

bin_intensity = env.Program(
    target="bin_intensity",
    source=common + ["bin_intensity_main.c", "bin_intensity.c",
                     "bin_intensity_t2.c", "bin_intensity_t3.c",
                     "histogram_gn.c"])

channels = env.Program(
    target="channels",
    source=common + ["channels_main.c", "channels.c", "channels_t2.c",
                     "channels_t3.c"])

correlate = env.Program(
    target="correlate",
    source=common + ["correlate_main.c", "correlate.c",
                     "correlate_t2.c", "correlate_t3.c",
                     "combinations.c"])

##correlate_vector = env.Program(
##    target="correlate_vector",
##    source=common + ["correlate_vector_main.c", "correlate_vector.c",
##                     "intensity.c", "intensity_t2.c", "intensity_t3.c",
##                     "histogram_gn.c", "vector_g2.c"])

gn = env.Program(
    target="gn",
    source=common + ["gn_main.c", "gn.c"])

histogram = env.Program(
    target="histogram",
    source=common + ["histogram_main.c", "histogram.c", "histogram_gn.c",
                     "histogram_t2.c", "histogram_t3.c",
                     "correlate_t2.c", "correlate_t3.c",
                     "combinations.c"])

intensity = env.Program(
    target="intensity",
    source=common + ["intensity_main.c", "intensity.c", "intensity_t2.c",
                     "intensity_t3.c"])

intensity_to_t2 = env.Program(
    target="intensity_to_t2",
    source=common + ["intensity_to_t2_main.c", "intensity_to_t2.c"])

picoquant = env.Program(
    target="picoquant",
    source=common + ["picoquant_main.c", "picoquant.c",
                     "picoharp.c",
                     os.path.join("picoharp", "ph_v20.c"),
                     "hydraharp.c",
                     os.path.join("hydraharp", "hh_v10.c"),
                     os.path.join("hydraharp", "hh_v20.c"),
                     "timeharp.c",
                     os.path.join("timeharp", "th_v20.c"),
                     os.path.join("timeharp", "th_v30.c"),
                     os.path.join("timeharp", "th_v50.c"),
                     os.path.join("timeharp", "th_v60.c")])

t3_as_t2 = env.Program(
    target="t3_as_t2",
    source=common + ["t3_as_t2_main.c"])


### Build the library and gather headers
def FindAllSourceFiles(self, target):
    def _find_sources(tgt, src, hdr, all):
        for item in tgt:
            if SCons.Util.is_List(item):
                _find_sources(item, src, hdr, all)
            else:
                if item.abspath in all:
                    continue

                all[item.abspath] = True

                if "main" in item.path:
                    pass
                elif item.path.endswith('.c'):
                    if not item.exists():
                        item = item.srcnode()
                    src.append(item.abspath)
                elif item.path.endswith('.h'):
                    if not item.exists():
                        item = item.srcnode()
                    hdr.append(item.abspath)
                else:
                    lst = item.children(scan=1)
                    _find_sources(lst, src, hdr, all)

    sources = []
    headers = []
    
    _find_sources(target, sources, headers, {})

    return(sources, headers)

import SCons
from SCons.Script.SConscript import SConsEnvironment # just do this once
SConsEnvironment.FindAllSourceFiles = FindAllSourceFiles

all_programs = [bin_intensity, channels, correlate,# correlate_vector,
                gn, histogram, intensity, intensity_to_t2, picoquant, t3_as_t2]

sources = set()
headers = set()
for program in all_programs:
    my_sources, my_headers = env.FindAllSourceFiles(program)
    sources.update(my_sources)
    headers.update(my_headers)

sources = list(sources)
headers = list(headers)

libphoton_correlation_static = env.Library(
    target="photon_correlation",
    source=sources)

libphoton_correlation_shared = env.SharedLibrary(
    "photon_correlation",
    sources)
