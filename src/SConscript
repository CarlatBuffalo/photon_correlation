import os

### Build the library and gather headers
def FindAllSourceFiles(self, target):
    def _find_sources(tgt, src, hdr, all):
        for item in tgt:
            if SCons.Util.is_List(item):
                _find_sources(item, src, hdr, all)
            else:
                if item.abspath in all:
                    continue

                all[item.abspath] = True

                if item.path.endswith('.c'):
                    if not item.exists():
                        item = item.srcnode()
                    src.append(item.abspath)
                elif item.path.endswith('.h'):
                    if not item.exists():
                        item = item.srcnode()
                    hdr.append(item.abspath)
                else:
                    lst = item.children(scan=1)
                    _find_sources(lst, src, hdr, all)

    sources = []
    headers = []
    all = {}
    
    _find_sources(target, sources, headers, all)

    return(sources, headers)

import SCons
from SCons.Script.SConscript import SConsEnvironment
SConsEnvironment.FindAllSourceFiles = FindAllSourceFiles


Import("env")
Import("bin_dir")
Import("py_bin_dir")
Import("lib_dir")
Import("include_dir")

# Set up the main programs
common = ["types.c", "error.c", "files.c", "options.c", "modes.c",
          "limits.c", "t2.c", "t3.c"]

program_files = {
    "bin_intensity": ["bin_intensity_main.c", "bin_intensity.c",
                      "bin_intensity_t2.c", "bin_intensity_t3.c",
                      "histogram_gn.c"],
    "channels": ["channels_main.c", "channels.c", "channels_t2.c",
                 "channels_t3.c"],
    "correlate": ["correlate_main.c", "correlate.c",
                  "correlate_t2.c", "correlate_t3.c",
                  "combinations.c"],
##    "correlate_vector": ["correlate_vector_main.c", "correlate_vector.c",
##                         "intensity.c", "intensity_t2.c", "intensity_t3.c",
##                         "histogram_gn.c", "vector_g2.c"],
    "gn": ["gn_main.c", "gn.c"],
    "histogram": ["histogram_main.c", "histogram.c", "histogram_gn.c",
                  "histogram_t2.c", "histogram_t3.c",
                  "correlate_t2.c", "correlate_t3.c",
                  "combinations.c"],
    "intensity": ["intensity_main.c", "intensity.c", "intensity_t2.c",
                  "intensity_t3.c"],
    "intensity_to_t2": ["intensity_to_t2_main.c", "intensity_to_t2.c"],
    "picoquant": ["picoquant_main.c", "picoquant.c",
                  "picoharp.c",
                  os.path.join("picoharp", "ph_v20.c"),
                  "hydraharp.c",
                  os.path.join("hydraharp", "hh_v10.c"),
                  os.path.join("hydraharp", "hh_v20.c"),
                  "timeharp.c",
                  os.path.join("timeharp", "th_v20.c"),
                  os.path.join("timeharp", "th_v30.c"),
                  os.path.join("timeharp", "th_v50.c"),
                  os.path.join("timeharp", "th_v60.c")],
    "t3_as_t2": ["t3_as_t2_main.c"]}
programs = dict()

for name, files in program_files.items():
    programs[name] = env.Program(target=name, source=common+files)


sources = set()
headers = set()
for name, program in programs.items():
    my_sources, my_headers = env.FindAllSourceFiles(program)
    sources.update(my_sources)
    headers.update(my_headers)
sources = list(sources)
headers = list(headers)

lib_sources = list(filter(lambda x: "main" not in x, sources))
lib_headers = list(filter(lambda x: "main" not in x, headers))

libshared = env.SharedLibrary(target="photon_correlation", source=lib_sources)

env.Install(dir=bin_dir, source=programs.values())
env.Install(dir=py_bin_dir, source=programs.values())
env.Install(dir=lib_dir, source=[libshared])

# If you just do env.Install(dir=include_dir, source=lib_headers), the list
# of headers will be flattened. Do them individually, instead.
env.Install(dir=include_dir, source=lib_headers)
