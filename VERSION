v3.3 (6 December 2013)
Added a new program called photon_synced_t2. This is meant to transform t2 data
into t3 data by treating one of the channels as a dedicated sync source. This 
is primarily used for overcoming limitations of the t3 hardware, such as lower
time resolution or lower achievable data rates.

--------------------------------------------------------------------------------

v3.2 (5 December 2013)
Changed the functionality for photon_gn to have separate options for intensity
bin width and time-dependent bin width. Now, when the bin width for intensity
is given, it only affects the intensity calculation. Specifying the window
width now repeats the calculation for fixed steps in time.

--------------------------------------------------------------------------------

v2.0 (14 February 2013)
This version marks a complete revamp of the programs. Instead of having 
specialized versions of the code for each photon mode, everything now operates
on more generalized photon types. This reduces code bloat and permits more rapid
error correction, since bugs only need to be fixed in a single place.

The following programs are new to this version:
-t3_to_t2: convert t3 photons to t2, given a sync rate
-t2_to_t3: convert t2 photons to t3, given a sync rate
-combinations: primarily for debugging, this efficiently generates permtuations
and combinations
-photons: primarily for debugging, this echos photons in the stream
-correlations: primarily for debugging, this echos correlations in the stream

The following programs are complete and tested:
-channels, combinations, correlate, correlations, intensity, intensity_to_t2, photons, t2_to_t3, t3_as_t2, t3_to_t2

The following programs are not usuable:
-bin_intensity, gn, correlate_vector

--------------------------------------------------------------------------------


v1.6 (18 October 2012)
As of this version, the following programs are effectively complete:
-correlate
-histogram
-intensity
-channels
-intensity_to_t2
-t3_as_t2

The following programs are complete except for a few possible changes:
-picoquant: HydraHarp v20 TTTR modes have not been tested, but they have been implemented.
-bin_intensity: t2 mode is complete and tested, but t3 mode may not be. T3 mode correctly accounts for the pulse delays, but it is not clear whether the time delays should be handled, and if so how they would be

The following programs are not useable:
-gn: It is not clear whether to do this in Python or C. The advantage of C is the speed of execution, but initial tests have not shown a clear difference between C and Python in this regard. Python is clearly more flexible and easier to implement, so at minimum it seems likely that it will be used to perform the final aspects of the calculation, such as normalization, while the C code generates the data necessary.
-correlate_vector: This program has been planned and awaits implementation. 

The following programs may be implemented:
-g2: A faster version of gn which focuses on performing the correlation of a fixed number of channels as quickly as possible. This code would be suitable for real-time correlation as well as general-purpose work.
