-write interfaces to the calculations, results in Python, Matlab
-write automated tests
-run valgrind against all programs, check that nothing has been missed.
-add lots of comments to explain implementations, etc.
-look into creating a single program which integrates all of the different operations on the photon stream.
-test the performance of subprocess in Python. How does the piping system in Python compare with pipes in Linux for speed? 
-refactor the code to be more library-like: build a users' API which contains only the functions necessary to do work, and hide away any internal stuff.
-build a gui for basic tasks like correlation, FLID, etc.

Integration with PicoQuant
-create a version of photon_gn which takes a photon stream directly through PicoQuant. This should speed up calculations.

photon_temper:
-add a filter for afterpulsing.

Photons:
-enable a t3 time offset: internally convert to t2, apply offset, convert back

idgn:
-check that intensities are accurate
-match the results of the calculation with equivalent Python calculation

flid:
-check that the intensities are accurate
-check that the aggregate result matches a normal gn calculation
